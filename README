# MaraBot

Bot automatizado para gesti√≥n de publicaciones y control de stock en **Turacion.com**, integrando **Playwright**, **Google Sheets** y **Excel**.

---

## Carpetas

marabot/
‚îÇ
‚îú‚îÄ‚îÄ service/  
‚îÇ ‚îú‚îÄ‚îÄ documentation/  
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ logs/
‚îÇ ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄbotStock.log # Registros
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ logger.js # Maneja los registros de la app
‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ mailer.js # Env√≠a mails en caso de error
‚îÇ ‚îÇ
‚îÇ ‚îú‚îÄ‚îÄ downloads/
‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ descarga.xlsx # Archivos descargados temporalmente
‚îÇ ‚îÇ
‚îÇ ‚îú‚îÄ‚îÄ botPrecios.js # Punto de entrada principal
‚îÇ ‚îú‚îÄ‚îÄ excelService.js # Descarga y primera lectura del Excel
‚îÇ ‚îú‚îÄ‚îÄ googleSheets.js # Funciones para manejar Excel online
‚îÇ ‚îî‚îÄ‚îÄ playwrightService.js # Recorrido del DOM y env√≠o de info a los dem√°s m√≥dulos
‚îÇ
‚îî‚îÄ‚îÄ .env # Variables sensibles: API keys, correos, contrase√±as

## üöÄ Caracter√≠sticas

- Descarga y lee un Excel con SKUs desde un **Google Sheet p√∫blico** (exportado a XLSX).
- Automatiza **login** y **navegaci√≥n** en el panel de administraci√≥n de **Turacion.com** con Playwright.
- Para cada SKU:

  - Detecta si tiene **‚ÄúRegalo a elecci√≥n‚Äù**.
  - Verifica estado de publicaci√≥n en **Web** y **Mercado Libre**.
  - Aplica reglas de marca (excepciones para marcas especiales).

- Actualiza resultados en una hoja de **Google Sheets**.
- Env√≠o de **notificaciones por email** en caso de error.

---

## üß© Arquitectura (alto nivel)

1. **botPrecios.js** (orquestador): descarga el XLSX, lee SKUs, inicia Playwright, itera y actualiza Sheets.
2. **playwrightService.js**: `login()` y `procesarSku()` (scraping, checks, resumenes).
3. **excelService.js**: descarga del XLSX y lectura con `xlsx`.
4. **googleSheets.js**: `authorize()`, `actualizarCelda()`.
5. **mailer.js**: manejador de errores v√≠a email.
6. **logger.js**: registro

```
Google Sheets (p√∫blico) ‚îÄ‚îÄ> XLSX local ‚îÄ‚îÄ> MaraBot ‚îÄ‚îÄ> Turacion.com (Admin)
                                            ‚îÇ            ‚îÇ
                                            ‚îî‚îÄ‚îÄ> Google Sheets (resultado)
                                            ‚îî‚îÄ‚îÄ> Mail en caso de error
```

---

## üì¶ Dependencias principales

- [playwright](https://www.npmjs.com/package/playwright)
- [dotenv](https://www.npmjs.com/package/dotenv)
- [googleapis](https://www.npmjs.com/package/googleapis)
- [xlsx](https://www.npmjs.com/package/xlsx)
- [nodemailer](https://www.npmjs.com/package/nodemailer)

Instalaci√≥n m√≠nima:

```bash
npm install playwright dotenv googleapis xlsx nodemailer winston
# (Recomendado para Playwright)
npx playwright install --with-deps
```

> **Node.js requerido:** v16 o superior (recomendado LTS vigente).

---

## üîê Configuraci√≥n

### 1) Variables de entorno (`.env`)

Crea un archivo `.env` en la ra√≠z:

```env
# Credenciales de Turacion
TURACION_EMAIL=tu_email
TURACION_PASSWORD=tu_password

# Credenciales GoogleSheets (no estan aplicadas, pero deberia ponerlas jsjsjsj)
SMTP_HOST=smtp.tu_proveedor.com
SMTP_PORT=587
SMTP_USER=usuario
SMTP_PASS=clave

#Credenciales Mailer
MAIL_USER=tu_user
MAIL_PASS=tu_pass
MAIL_TO=destinatario_

```

> **Seguridad:** No subas `.env`, `credentials.json` ni `token.json` a Git. Aseg√∫rate de tenerlos en `.gitignore`.

### 2) Google Sheets API

- En **Google Cloud Console** crea un proyecto y habilita **Google Sheets API**.
- Descarga el \`\` (OAuth client/Installed) y col√≥calo en la **ra√≠z** del proyecto.
- La primera ejecuci√≥n generar√° `token.json` (autorizaci√≥n local).

**Scopes sugeridos**:

```
https://www.googleapis.com/auth/spreadsheets
```

### 3) Hoja de c√°lculo

- El **ID** del spreadsheet (ej. `1iSHc...`) debe configurarse en el c√≥digo o `.env`.
- La hoja del d√≠a se nombra \`\` (p.ej. `2025-08-16`).
- Estructura m√≠nima de columnas:

  - **A**: `PRODUCTO`
  - **B**: `SKU`
  - **C**: `D√çA`
  - **D**: `Publicado Web (S√≠/No)`
  - **E**: `Regalo a elecci√≥n (S√≠/No)`
  - **F**: `Publicado ML (S√≠/No)`
  - **G**: `Resumen`

> Si tus columnas difieren, ajusta los rangos al actualizar con `actualizarCelda()`.

---

## üèÉ Ejecuci√≥n

```bash
# 1) Instala dependencias
npm install
npx playwright install --with-deps

# 2) Ejecuta el bot
node service/botPrecios.js
```

**Flags √∫tiles de Playwright:**

- Modo visible: `chromium.launch({ headless: false })` (por defecto)
- Modo headless: `chromium.launch({ headless: true })`

---

##  Estructura sugerida

```
service/
  botPrecios.js            # Flujo principal
  playwrightService.js     # login() y procesarSku()
  excelService.js          # descargarExcel(), obtenerSkusDesdeArchivoLocal()
  googleSheets.js          # authorize(), actualizarCelda()
  mailer.js                # enviarMailError()
.env
credentials.json           # Google API (no commitear)
token.json                 # Se genera tras autorizar (no commitear)
```

---

##  L√≥gica clave

- **Detecci√≥n de tabla de atributos** (regalo a elecci√≥n):

  - Tabla con ID `#productattributemappings-grid`.
  - Tabla vac√≠a: `td.dataTables_empty`.
  - Tabla con datos: `tbody tr[role="row"]`.

- **Checks de publicaci√≥n**:

  - Web: checkboxes `#Published` y `#VisibleIndividually`.
  - ML: estados en `#productsMeliList-grid_wrapper` con `span.grid-report-item` (`.green` activo / `.red` en revisi√≥n).

- **Reglas por marca**: aplicar excepciones para marcas **acana, orijen, guabi, gran plus, naturalis, formula natural, multivet**.

---

## Ejemplo de salida (Google Sheets)

- **D (Web)**: `S√≠` / `No` seg√∫n `#Published`.
- **E (Regalo a elecci√≥n)**: `S√≠` si existe `#productattributemappings-grid` con filas.
- **F (ML)**: `S√≠` si hay al menos una publicaci√≥n `.green`.
- **G (Resumen)**: texto agregando contexto de Web/ML y reglas.

---

## Manejo de errores

- `try/catch` por **SKU** para no cortar el lote.
- `enviarMailError(asunto, cuerpo)` en el **catch** principal.
- Logs descriptivos en consola (‚úÖ/‚ùå por SKU).

---

## Troubleshooting

- `** / **`: Inicializa **ambas** variables al inicio de `procesarSku` y **siempre** retorna `{ resumenCompleto, resumenML, resumenWeb, RegaloAEleccion }`.
- **Playwright no encuentra filas**: Evit√° `waitForTimeout`. Us√° `waitForSelector('tr[role="row"]')` y selectores espec√≠ficos como `'#productattributemappings-grid tbody tr[role="row"]'`.
- \`\`\*\* falta\*\*: Captur√° excepciones al leerlo y dispar√° `enviarMailError`.
- **Doble definici√≥n de funciones**: No redefinir `login/procesarSku` en `botPrecios.js` si ya se exportan desde `playwrightService.js`.

---

## Ejecuci√≥n programada

- Esta programado en este caso con Programador de tareas cada 30 min durante 12 horas, tambien se puede utilizar Cron pero no da tanta flexibilidad.

---

##  Scripts (opcional en `package.json`)

```json
{
  "scripts": {
    "start": "node service/botPrecios.js",
    "dev": "NODE_ENV=development node service/botPrecios.js",
    "playwright:install": "playwright install --with-deps"
  }
}
```

## üìÑ Licencia

MIT
